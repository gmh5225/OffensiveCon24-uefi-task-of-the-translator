#!/usr/bin/python3

import sys, os
import subprocess
import re



########################################################################################
#	A simple Python script for copying EFI binaries built with EDK2 and OVMF
#   copying the resultant .efi binary to the target root disk for QEMU
#   and launching a qemu-system-x86_64 session for testing
#
#	There isn't anything *wild* or super interesting about this script
#	tbh I just didn't want to keep typing these really long qemu commands over and over
########################################################################################

edk2_dir="/Users/nika/uefi_testing/edk2/"
uefi_testingdir_cmd=["cd", edk2_dir, "&&", ". ./edksetup.sh"]
#test_dir=
uefi_app_build_cmd= ["build",  "--platform=BareBonesPkg/BareBonesPkg.dsc",  "--arch=X64", "--buildtarget=RELEASE", "--tagname=GCC"]

target_pkg="Build/BareBonesPkg/DEBUG_GCC/Aarch64/"
uefi_driver_name="UEFIQuineAarch64.efi"
#uefi_app_name="self-rep-golf.efi"
aarch64_fd="/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/aarch64_uefi_test_env/QEMU_EFI_AA64.fd"
target_uefi_driver= edk2_dir + target_pkg + uefi_driver_name
target_disk="/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/UEFI_bb_disk"
uefi_copy_app_cmd=["cp", target_uefi_driver, target_disk]

##qemu UEFI run command with no graphics output

##uefi_app_run_aarch64_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt,highmem=off", "-cpu", "cortex-a72", "-m", "2G", "-drive", "if=pflash,format=raw,file=/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/DEBUG_BUILD_AARCH64_FD/FVP_AARCH64_EFI.fd", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-nographic","-net","none"]

##uefi_app_run_aarch64_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt", "-cpu", "cortex-a57", "-m", "1G", "-drive", "if=pflash,format=raw,file=/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/edk2-aarch64-code.fd", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-serial", "pty", "-monitor", "pty", "-serial", "file:./log.txt", "-nographic","-net","none"]

uefi_app_run_aarch64_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt", "-cpu", "cortex-a57", "-bios", "./aarch64_uefi_test_env/QEMU_EFI_AA64.fd", "-m", "1G", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-serial", "pty", "-monitor", "pty", "-serial", "file:./log.txt", "-nographic","-net","none"]
#uefi_app_run_aarch64_debug_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt,highmem=off", "-cpu", "cortex-a72", "-m", "1G", "-drive", "if=pflash,format=raw,file=/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/edk2-aarch64-code.fd", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-nographic","-net","none", "-s"]

##qemu UEFI run command with graphics output
#uefi_app_graphics_run_cmd=["/opt/homebrew/bin/qemu-system-x86_64", "-drive", "if=pflash,format=raw,file=/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/DEBUG_BUILD_AARCH64_FD/FVP_AARCH64_EFI.fd", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk","-net","none","-device","virtio-rng-pci", "-machine","q35,smm=on", "-smp","4", "-m","256M","-vga","std"]



if __name__ == '__main__':

	try:
		subprocess.run(uefi_copy_app_cmd)
		subprocess.run(uefi_app_run_aarch64_cmd)
		##subprocess.run(uefi_app_run_aarch64_debug_cmd)
	
	except (RuntimeError, TypeError) as e:
		print("oh no. error error: {0}".format(e))
	
