#!/usr/bin/python3

import sys, os
import subprocess
import re



########################################################################################
#	Python script for running PoC UEFI applications/drivers 
#	includes functionality for:
#	- building EFI binaries with EDK2
#   - copying the resultant .efi binary to the target root disk for QEMU
#   - launching a qemu-system-aarch_64 session for testing
#   - launching a qemu-system-aarch_64 session with debugging 
#		(running QEMU debugging session requires launching gdb in a separate window
#		and requires opening 2 ptys for qemu-monitor and serial console
#		following the guide in arm64-UEFI-debugging for steps on debugging arm64 uefi)
#
#	This test script relies on the homebrew qemu-system-aarch64 package
#	pathnames for launching qemu-system-aarch64 follow the conventions for those specs
#	If you're testing this on a different OS, alter pathnames wrt qemu-system-aarch64
#
########################################################################################
workspace="$WORKSPACE"
edk2_dir= workspace + "/edk2/"
uefi_testingdir_cmd=["cd", edk2_dir, "&&", ". ./edksetup.sh"]
uefi_app_build_cmd= ["build",  "--platform=BareBonesPkg/BareBonesPkg.dsc",  "--arch=X64", "--buildtarget=RELEASE", "--tagname=GCC"]

target_pkg="Build/BareBonesPkg/DEBUG_GCC/Aarch64/"
uefi_driver_name="QuineArm64.efi"
target_uefi_driver= edk2_dir + target_pkg + uefi_driver_name
#target_disk="./UEFI_bb_disk"
#uefi_copy_app_cmd=["cp", target_uefi_driver, target_disk]

##qemu UEFI run command with no graphics output
uefi_app_run_arm64_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt", "-cpu", "cortex-a57", "-bios", "./arm64-uefi-test-env/QEMU_EFI_AA64.fd", "-m", "1G", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-nographic","-net","none"]


##qemu UEFI debugging command with no graphics output
uefi_app_run_arm64_debug_cmd=["/opt/homebrew/bin/qemu-system-aarch64", "-M", "virt", "-cpu", "cortex-a57", "-bios", "./arm64-uefi-test-env/QEMU_EFI_AA64.fd", "-m", "1G", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk", "-serial", "pty", "-monitor", "pty", "-serial", "file:./log.txt", "-nographic","-net","none", "-s"]

##qemu UEFI run command with graphics output
uefi_app_graphics_run_cmd=["/opt/homebrew/bin/qemu-system-x86_64", "-drive", "if=pflash,format=raw,file=/Users/nika/uefi-task-of-the-translator/Aarch64_UEFI_exploits/DEBUG_BUILD_AARCH64_FD/FVP_AARCH64_EFI.fd", "-drive", "format=raw,file=fat:rw:UEFI_bb_disk","-net","none","-device","virtio-rng-pci", "-machine","q35,smm=on", "-smp","4", "-m","256M","-vga","std"]



if __name__ == '__main__':
	try:
		#subprocess.run(uefi_copy_app_cmd)
		subprocess.run(uefi_app_run_arm64_cmd)
		#subprocess.run(uefi_app_run_arm64_debug_cmd)
	
	except (RuntimeError, TypeError) as e:
		print("oh no. error error: {0}".format(e))
	
